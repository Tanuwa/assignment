enerate and store 100 enemies.

Each enemy should have the following properties:

    type
hitPoints
defense
The type should be randomly selected among the following types:

    Ancient Dragon
Prowler
Mighty Grunt
To accomplish this, you 'll want to create a separate function whose sole purpose is to return an enemy type. Each type should have an equal chance at being selected as the others.

The hitPoints property should be generated randomly according to the following criteria:

    If the type is Ancient Dragon then the hitPoints should be between 80 - 100
If the type is Prowler then the hitPoints should be between 50 - 79
If the type is Mighty Grunt then the hitPoints should be between 20 - 49
Like the
function to choose an enemy type, you 'll want to create another separate function whose sole purpose is to return the number of hit points that enemy has. It'
ll help
if you take a parameter to this
function of the already - decided enemy type from above.Check the first hint below to see how to choose a number in a random range when specifying the maximum and minimum.

The enemy 's defense is generated by multiplying the hitPoints by 3

Your constructor
function will call on these other functions you 've created to help populate the statistics for each enemy generated.

Print each of the 100 enemies to the console.

Hints
Javascript Random Range
Constructor Functions





function Enemy(type, hitPoint, defence) {

    this.type = enemyType();
    this.hitPoint = hitPoint;
    this.defence = defence;

    function enemyType() {

        var enemy = ["Ancient Dragon", "Prowler", "Mighty Grunt"];

        return enemy[Math.floor(Math.random() * 3)];
    }
    console.log(enemyType());









    another example
    var enemies = []

    function Enemy(type, hitPoints, defense) {
        this.type = typeGen();
        this.hitPoints = hp();
        this.defense = (this.hitPoints * 3);
    }

    function typeGen() {
        var rand = Math.random();
        if (rand <= .33) {
            return "Ancient Dragon";
        } else if (rand >= .66) {
            return "Prowler";
        } else {
            return "Mighty Grunt";
        }
    };

    function hp() {
        var gen = typeGen();
        if (gen === "Ancient Dragon") {
            return (Math.floor((Math.random() * 20)) + 81);
        } else if (gen === "Prowler") {
            return (Math.floor((Math.random() * 20)) + 50);
        } else {
            return (Math.floor((Math.random() * 20)) + 20);
        }
    }

    for (var i = 0; i < 100; i++) {
        var bad = new Enemy();
        enemies.push(bad);
    }
    console.log(enemies);









    anather example
    enemies = []

    function Enemy() {
        this.type = getRandomEnemyType();
        this.hitPoints = getHitPoints(this.type);
        this.defense = this.hitPoints * 3;
        this.toString = function () {
            return enemy.type + " (HP: " + enemy.hitPoints + ", defense: " + enemy.defense + ")"
        }
    }

    function getRandomInt(min, max) {
        return Math.floor(Math.random() * (max - min + 1)) + min;
    }

    function getRandomEnemyType() {
        switch (getRandomInt(0, 2)) {
            case 0:
                return "Ancient Dragon"
            case 1:
                return "Prowler"
            case 2:
                return "Mighty Grunt"
        }
        return "Unknown";
    }

    function getHitPoints(enemyType) {
        switch (enemyType) {
            case "Ancient Dragon":
                return getRandomInt(80, 100);
            case "Prowler":
                return getRandomInt(50, 79);
            case "Mighty Grunt":
                return getRandomInt(20, 49);
        }
        return 0;
    }
